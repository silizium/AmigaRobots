/**********************************************************************/
/*                            ARStatistic                             */
/*          Statistische Auswertung der AmigaRobots-logfiles          */
/**********************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "liste.h"

#define VERSION "1.0ß"
#define MAXROBOTS 100
#define FCHARS 30

char buffer[80];
char arena[FCHARS];

struct Robot
{
	char	name[FCHARS];
	int 	kills,
			killed,
			survived,
			ticks,
			armour,
			startarmour,
			mun,
			startmun;
};
short listsize = 0;


/* Stringcompare upper */
int strccmp(unsigned char *s1, unsigned char *s2)
{
	int res;

	while(*s1 || *s2)
	{
		if((res = toupper(*s1) - toupper(*s2)))
			return res;
		s1++;
		s2++;
	}
	return 0;
}

char *strtoupper(char *str)
{
	static char *upper=NULL;
	char *up;
	
	if(upper) free(upper);
	up=upper=malloc(strlen(str));
	while(*up=toupper(*str)) {str++;up++;}

	return upper;
}

LIST *daten_lesen(void)
{
	int i,index=0;
	int id,
		armour,startarmour,
		ticks,hitbyindex,
		mun,startmun,zeichen;
	char alive,selfdestruct,
		name[FCHARS];
	LIST *l;
	NODE *n;
	short *kills;
	NODE **robotarr;
	struct Robot *robo,newrobo;

	memset(&newrobo,0,sizeof(newrobo));

	l=newlist();
	
	while(!feof(stdin))
	{
		gets(buffer); /* AmigaRobots */
		if(feof(stdin)) break;
		gets(buffer); /* Arena */
		strcpy(arena,buffer+7);
		gets(buffer); /* Roboterzahl */
		sscanf(buffer,"Roboteranzahl: %ld",&i);
		gets(buffer); /* Runden ... */
		gets(buffer); /* Werte ... */
		gets(buffer); /* ID Panzerung ... */

		kills=malloc((i+20)*sizeof(*kills));
		memset(kills,0,(i+20)*sizeof(*kills));
		robotarr=malloc((i+20)*sizeof(*robotarr));
		memset(robotarr,0,(i+20)*sizeof(*robotarr));
		
		while(i-- > 0)
		{
			gets(buffer); /* Roboterzeile */
			sscanf(buffer,"%ld%c %ld/%ld %ld %ld%c %ld/%ld %n",
				&id,
				&alive,
				&armour,
				&startarmour,
				&ticks,
				&hitbyindex,
				&selfdestruct,
				&mun,
				&startmun,
				&zeichen
			);
			strcpy(name,buffer+zeichen);

			if(!(n=findname(l,strtoupper(name))))	/* gefunden?, sonst neu */
			{
				n=newnode(&newrobo,sizeof(newrobo),index++,strtoupper(name));
				addtail(l,n);
			}
			robotarr[id]=n;	/* Welcher Roboter liegt wo (der 1. ist ...) */

			if(!n) {perror("Kein Speicher für Knoten!\n"); exit(20);}

			robo=getdata(n);
			if(alive != '+')
			{
				robo->killed++;
				kills[hitbyindex]++;
			}
			else
				robo->survived++;

			strncpy(robo->name,name,FCHARS-1);
			robo->ticks += ticks;
			robo->armour += armour;
			robo->startarmour += startarmour;
			robo->mun += mun;
			robo->startmun += startmun;
		}

		while(id > 0)
		{
			if(robotarr[id])
			{
				robo=getdata(robotarr[id]);
				robo->kills += kills[id];
			}
			id--;
		}
		free(kills);
		free(robotarr);
	}
	return l;
}

void datendump(LIST *l)
{
	register struct Robot *rp;
	NODE *n;

	printf("Name            Spiele   Züge             Lebend    Kills"
		"         Panzerung             Munition\n");
	for(n=getfirst(l);n;n=getnext(l))
	{
		rp=getdata(n);
		printf("%-14.14s %4d %9d %7.0fø %4d %5.1f%% %4d %5.2fø %6d/%6d %5.1f%% %6d/%6d %5.1f%%\n",
			rp->name,
			rp->killed+rp->survived,
			rp->ticks,
			1.0*rp->ticks/(rp->killed+rp->survived),
			rp->survived,
			100.0*rp->survived/(rp->killed+rp->survived),
			rp->kills,
			1.0*rp->kills/(rp->killed+rp->survived),
			rp->armour,
			rp->startarmour,
			100.0*rp->armour/rp->startarmour,
			rp->mun,
			rp->startmun,
			100.0*rp->mun/rp->startmun
		);
	}
}

void main(void)
{
	LIST *l;

	puts("AmigaRobots Statistik V" VERSION);
	l=daten_lesen();
	datendump(l);
	dellist(l);
}

